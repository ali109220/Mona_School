// <auto-generated />
using System;
using EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFrameworkCore.Migrations
{
    [DbContext(typeof(MonaContext))]
    [Migration("20210306145323_Initial_Migration")]
    partial class Initial_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.SharedDomain.Security.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsAdmin");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<int?>("CurrencyId");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<DateTime?>("ExamDate");

                    b.Property<string>("InChargeId");

                    b.Property<int>("LessonPeriod");

                    b.Property<string>("Note");

                    b.Property<int?>("PeroidBeforeSendEmailId");

                    b.Property<double>("RemainingMoney");

                    b.Property<DateTime?>("StartCourse");

                    b.Property<int>("Status");

                    b.Property<double>("TotalAmount");

                    b.Property<int?>("TypeOfExamId");

                    b.Property<int?>("TypeOfPacketId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InChargeId");

                    b.HasIndex("PeroidBeforeSendEmailId");

                    b.HasIndex("TypeOfExamId");

                    b.HasIndex("TypeOfPacketId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<string>("InChargeId");

                    b.Property<int>("LessonPeriod");

                    b.Property<string>("Note");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Time");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InChargeId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<string>("HandOverByUserId");

                    b.Property<string>("Note");

                    b.Property<double>("PaymentAmount");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<DateTime?>("PaymentTime");

                    b.Property<double>("RemainingMoney");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("HandOverByUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Settings.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<string>("ForeignName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Domain.Settings.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateTime");

                    b.Property<bool>("HasSeen");

                    b.Property<string>("TypeFullName");

                    b.Property<int>("TypeId");

                    b.Property<string>("UserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Domain.Settings.PeroidBeforeSendEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<string>("ForeignName");

                    b.Property<int>("Hours");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("PeroidBeforeSendEmails");
                });

            modelBuilder.Entity("Domain.Settings.TypeOfExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<string>("ForeignName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("TypeOfExams");
                });

            modelBuilder.Entity("Domain.Settings.TypeOfPacket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUserId");

                    b.Property<string>("ForeignName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUserId");

                    b.Property<bool>("VirtualDeleted");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("TypeOfPackets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Domain.Settings.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Courses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "InCharge")
                        .WithMany()
                        .HasForeignKey("InChargeId");

                    b.HasOne("Domain.Settings.PeroidBeforeSendEmail", "PeroidBeforeSendEmail")
                        .WithMany()
                        .HasForeignKey("PeroidBeforeSendEmailId");

                    b.HasOne("Domain.Settings.TypeOfExam", "TypeOfExam")
                        .WithMany()
                        .HasForeignKey("TypeOfExamId");

                    b.HasOne("Domain.Settings.TypeOfPacket", "TypeOfPacket")
                        .WithMany()
                        .HasForeignKey("TypeOfPacketId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId");

                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "InCharge")
                        .WithMany()
                        .HasForeignKey("InChargeId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("CourseId");

                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "HandOverByUser")
                        .WithMany()
                        .HasForeignKey("HandOverByUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Domain.Settings.Currency", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Domain.Settings.Log", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Settings.PeroidBeforeSendEmail", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Domain.Settings.TypeOfExam", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Domain.Settings.TypeOfPacket", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("Core.SharedDomain.Security.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.SharedDomain.Security.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.SharedDomain.Security.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
